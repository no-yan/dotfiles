# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#!/bin/zsh

# To profile performance, uncomment the line below.
# zmodload zsh/zprof

# ========================================
# Options
# ========================================

# Enable emacs keymapping
bindkey -e

## History
HISTSIZE=10000
SAVEHIST=10000
setopt append_history
setopt share_history
setopt hist_ignore_all_dups

# auto directory pushd that you can get dirs list by cd -[tab]
setopt auto_pushd

# ========================================
# Alias
# ========================================

# Git
alias g="git"
alias gp="git push"
alias gcm="git commit -m"

# Zsh
alias sz="source ~/.zprofile && source ~/.zshrc"
alias vz="nvim  ~/.zshrc"

# Neovim
alias nvc="cd ~/.config/nvim && nvim init.lua"
alias v="nvim"
alias vim="nvim"

# Chezmoi
alias cz="chezmoi"

# GNU
alias xargs="gxargs"

# Pnpm
alias pn=pnpm

# Atcoder
alias acc-s="acc s main.py -- --guess-python-interpreter pypy"
alias oj-t="oj t -c 'pypy main.py'"

# ========================================
# Function definition
# ========================================

# Select existing repository to cd
fzf-ghq() {
  local src=$(ghq list | fzf --prompt="Git Repos > " --preview "bat --color=always --theme=TwoDark --style=header,grid --line-range :80 $(ghq root)/{}/(README|readme).*")

  if [ -n "$src" ]; then
    BUFFER="cd $(ghq root)/${src}"
    zle accept-line
  fi
  zle -R -c
}

zle -N fzf-ghq
bindkey "^g" fzf-ghq

# Create a new GitHub repo and open in VS Code
ghcr() {
  gh repo create $argv
  ghq get ${argv[1]}
  code $(ghq list --full-path -e ${argv[1]})
}

# Open an existing repo in VS Code
ghget() {
  code $(ghq list --full-path -e ${argv[1]})
}

# Create .gitignore Template from github/gitignore
gignore() {
  local templateType

  if [ $# = 0 ]; then
    templateType=$(curl -s -H \"Accept: application/vnd.github.v3+json\" https://api.github.com/gitignore/templates  | jq -r '.[]' | fzf)
  else
    templateType=$1
  fi
  curl -s -H "Accept: application/vnd.github.v3+json"  https://api.github.com/gitignore/templates/${templateType} | jq -r '.source' > .gitignore
}

alias proot='cd $(git rev-parse --show-toplevel)'
git-root() {
  cd "$(git rev-parse --show-toplevel)" || echo "Not in a Git repository"
}

# ========================================
# Completion
# ========================================

zstyle ':completion:*' rehash true

autoload bashcompinit && bashcompinit
autoload -Uz compinit
setopt extendedglob local_options
if [[ -n ~/.zcompdump(#qN.mh+24) ]]; then
  compinit -d
else
  compinit -C
fi

# fzf
[ -f ~/.fzf.zsh ] && source <(fzf --zsh)

# AWS
complete -C '/usr/local/bin/aws_completer' aws

# gcloud
if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then . "$HOME/google-cloud-sdk/completion.zsh.inc"; fi

# ESMeta
if [ -d ~/ghq/github.com/es-meta/esmeta ]; then
  source $ESMETA_HOME/.completion
fi

source ~/completion-for-pnpm.zsh

# ========================================
# Misc
# ========================================

if command -v brew &>/dev/null; then
  export BREW_PREFIX=$HOMEBREW_PREFIX
fi

# Mise
if [[ -v "$BREW_PREFIX" ]]; then
  eval "$($BREW_PREFIX/bin/mise activate zsh)"
else
  eval "$(~/.local/bin/mise activate bash)"
fi

# Powerlevel10k prompt
if [[ -r "$BREW_PREFIX/share/powerlevel10k/powerlevel10k.zsh-theme" ]]; then
  source "$BREW_PREFIX/share/powerlevel10k/powerlevel10k.zsh-theme"
fi

# To customize prompt, run: p10k configure

# Auto compile .zshrc
if [ ~/.zshrc -nt ~/.zshrc.zwc ]; then
  zcompile ~/.zshrc
fi

# To profile performance, uncomment the line below.
# zprof

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
