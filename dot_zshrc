#!/bin/zsh

# To propile performance, un-commnet the line below.
# zmodload zsh/zprof

# Setup OS specific paths
setup_path() {
  if [[ "$(uname)" == "Darwin" ]]; then
    # Mac OS
    [[ -d "/opt/homebrew" ]] && export PATH="/opt/homebrew/bin:$PATH"
    [[ -d "/usr/local" ]] && export PATH="/usr/local/bin:$PATH"
  elif [[ "$(uname)" == "Linux" && -n "$(grep -i microsoft /proc/version 2>/dev/null)" ]]; then
    # WSL
    export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
  fi
}
setup_path


# Homebrew setting and completions
setup_homebrew() {
  # https://docs.brew.sh/Shell-Completion#configuring-completions-in-zsh
  if type brew &>/dev/null
  then
    if [[ -d "/opt/homebrew/share/zsh/site-functions" ]]; then
      FPATH="/opt/homebrew/share/zsh/site-functions:${FPATH}"
    elif [[ -d "/usr/local/share/zsh/site-functions" ]]; then
      FPATH="/usr/local/share/zsh/site-functions:${FPATH}"
    fi   
  fi
}
setup_homebrew


# ========================================
# Environment variable
# ========================================
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin
export GODEBUG=asyncpreemptoff=1
export EDITOR=nvim

# AtCoder Library
export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:$HOME/ghq/github.com/atcoder/ac-library

if [ -d ~/ghq/github.com/es-meta/esmeta ]; then
  export ESMETA_HOME=~/ghq/github.com/es-meta/esmeta
  export PATH="$ESMETA_HOME/bin:$PATH"
fi


# ========================================
# PATH
# ========================================
# brew
export PATH="$(brew --prefix)/sbin:$PATH"
# LLVM
export PATH="$(brew --prefix)/opt/llvm/bin:$PATH"
# Openjdk
export PATH="$(brew --prefix)/opt/openjdk/bin:$PATH"
# curl
export PATH="$(brew --prefix)/opt/curl/bin:$PATH"
# Standard ML
export PATH="/usr/local/smlnj/bin:$PATH"
# Python package manager
export PATH="~/.local/bin:$PATH"
# Yarn
export PATH="$PATH:$HOME/.yarn/bin"

# pnpm
export PNPM_HOME="${HOME}/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# gcloud
if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then . "$HOME/google-cloud-sdk/path.zsh.inc"; fi


# ========================================
# Alias
# ========================================
# Git aliases
alias gcb="git checkout -b"
alias gcm="git commit -m"
alias gal='git add -A'
alias gp="git push"
alias currentBranch="git branch --contains"

# Zsh aliases
alias sz='source ~/.zshrc'
alias vz='nvim  ~/.zshrc'

# Neovim aliases
alias nvc='cd ~/.config/nvim && nvim init.lua'
alias v='nvim'
alias vim='nvim'

# Other aliases
alias yaw="yarn workspace"

# Atcoder aliases
alias acc-s='acc s main.py -- --guess-python-interpreter pypy'
alias oj-t='oj t -c "pypy main.py"' # for online judge tools
# https://atcoder.github.io/ac-library/document_ja/appendix.html

alias pn=pnpm


# ========================================
# Function definition
# ========================================
# Select existing repository and move
fzf-ghq() {
# https://qiita.com/kassy11/items/77456688a392ddb0b285
  local src=$(ghq list | fzf --prompt="Git Repos > " --preview "batcat --color=always --theme=TwoDark --style=header,grid --line-range :80 $(ghq root)/{}/(README|readme).*")

  if [ -n "$src" ]; then
    BUFFER="cd $(ghq root)/${src}"
    zle accept-line
  fi
  zle -R -c
}

zle -N fzf-ghq
bindkey "^g" fzf-ghq

# Create a new GitHub repo and open in VS Code
ghcr() {
  gh repo create $argv
  ghq get ${argv[1]}
  code $(ghq list --full-path -e ${argv[1]})
}

# Open an existing repo in VS Code
ghget() {
  code $(ghq list --full-path -e ${argv[1]})
}

# Create .gitignore Template from github/gitignore
# If no specific language is given, all templates will be displayed
gignore() {
  local templateType

  if [ $# = 0 ]; then
    templateType=$(curl -s -H \"Accept: application/vnd.github.v3+json\" https://api.github.com/gitignore/templates  | jq -r '.[]' | fzf)
  else
    templateType=$1
  fi
  curl -s -H "Accept: application/vnd.github.v3+json"  https://api.github.com/gitignore/templates/${templateType} | jq -r '.source' > .gitignore
}


# ========================================
# Completion
# ========================================
# Cache compinit
zstyle ':completion:*' rehash true

autoload -Uz compinit

# 初めて補完が必要になった時に `compinit` を実行
zsh_compinit_init=false
zshaddhistory() {
  if [[ $zsh_compinit_init == false ]]; then
    compinit
    zsh_compinit_init=true

    # fzf
    [ -f ~/.fzf.zsh ] && source <(fzf --zsh)

    # tabtab
    [[ -f ~/.config/tabtab/zsh/__tabtab.zsh ]] && . ~/.config/tabtab/zsh/__tabtab.zsh || true


    # bash compatible completion
    autoload -U +X bashcompinit && bashcompinit

    # terraform
    complete -o nospace -C $(brew --prefix)/bin/terraform terraform
    complete -o nospace -C $(brew --prefix)/Cellar/tfenv/2.2.3/versions/1.2.3/terraform terraform

    # AWS
    complete -C '/usr/local/bin/aws_completer' aws

    # gcloud
    if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then . "$HOME/google-cloud-sdk/completion.zsh.inc"; fi

    # ESMeta
    if [ -d ~/ghq/github.com/es-meta/esmeta ]; then
      source $ESMETA_HOME/.completion
    fi

  fi
}


# ========================================
# Misc
# ========================================
## Terminal Logs
HISTSIZE=10000
SAVEHIST=10000
setopt append_history
setopt share_history
setopt hist_ignore_all_dups

# iterm2 shell integration
if test -e "${HOME}/.iterm2_shell_integration.zsh";
then source "${HOME}/.iterm2_shell_integration.zsh"
fi

# Starship prompt
eval source <($(brew --prefix)/bin/starship init zsh --print-full-init)

# Mise
eval "$($(brew --prefix)/bin/mise activate zsh)"

# Auto compile .zshrc
if [ ~/.zshrc -nt ~/.zshrc.zwc ]; then
  zcompile ~/.zshrc
fi

# To propile performance, un-commnet the line below.
# zprof
