#!/bin/zsh

# To profile performance, uncomment the line below.
# zmodload zsh/zprof


if command -v brew &>/dev/null; then
  export BREW_PREFIX=$(dirname $(dirname $(which brew)))
fi

# ========================================
# Alias
# ========================================

# Git
alias g="git"
alias gp="git push"

# Zsh
alias sz="source ~/.zshrc"
alias vz="nvim  ~/.zshrc"

# Neovim
alias nvc="cd ~/.config/nvim && nvim init.lua"
alias v="nvim"
alias vim="nvim"

# Pnpm
alias pn=pnpm

# Atcoder
alias acc-s="acc s main.py -- --guess-python-interpreter pypy"
alias oj-t="oj t -c 'pypy main.py'" # for online judge tools
# https://atcoder.github.io/ac-library/document_ja/appendix.html



# ========================================
# Function definition
# ========================================

# Select existing repository to cd
fzf-ghq() {
# https://qiita.com/kassy11/items/77456688a392ddb0b285
  local src=$(ghq list | fzf --prompt="Git Repos > " --preview "batcat --color=always --theme=TwoDark --style=header,grid --line-range :80 $(ghq root)/{}/(README|readme).*")

  if [ -n "$src" ]; then
    BUFFER="cd $(ghq root)/${src}"
    zle accept-line
  fi
  zle -R -c
}

zle -N fzf-ghq
bindkey "^g" fzf-ghq

# Create a new GitHub repo and open in VS Code
ghcr() {
  gh repo create $argv
  ghq get ${argv[1]}
  code $(ghq list --full-path -e ${argv[1]})
}

# Open an existing repo in VS Code
ghget() {
  code $(ghq list --full-path -e ${argv[1]})
}

# Create .gitignore Template from github/gitignore
# If no specific language is given, all templates will be displayed
gignore() {
  local templateType

  if [ $# = 0 ]; then
    templateType=$(curl -s -H \"Accept: application/vnd.github.v3+json\" https://api.github.com/gitignore/templates  | jq -r '.[]' | fzf)
  else
    templateType=$1
  fi
  curl -s -H "Accept: application/vnd.github.v3+json"  https://api.github.com/gitignore/templates/${templateType} | jq -r '.source' > .gitignore
}


# ========================================
# Completion
# ========================================

# Cache compinit
zstyle ':completion:*' rehash true

autoload -Uz compinit

# 初めて補完が必要になった時に `compinit` を実行
zsh_compinit_init=false
zshaddhistory() {
  if [[ $zsh_compinit_init == false ]]; then
    compinit
    zsh_compinit_init=true

    # fzf
    [ -f ~/.fzf.zsh ] && source <(fzf --zsh)

    # tabtab
    [[ -f ~/.config/tabtab/zsh/__tabtab.zsh ]] && . ~/.config/tabtab/zsh/__tabtab.zsh || true


    # bash compatible completion
    autoload -U +X bashcompinit && bashcompinit

    # terraform
    complete -o nospace -C $BREW_PREFIX/bin/terraform terraform
    complete -o nospace -C $BREW_PREFIX/Cellar/tfenv/2.2.3/versions/1.2.3/terraform terraform

    # AWS
    complete -C '/usr/local/bin/aws_completer' aws

    # gcloud
    if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then . "$HOME/google-cloud-sdk/completion.zsh.inc"; fi

    # ESMeta
    if [ -d ~/ghq/github.com/es-meta/esmeta ]; then
      source $ESMETA_HOME/.completion
    fi

  fi
}


# ========================================
# Misc
# ========================================

## Terminal Logs
HISTSIZE=10000
SAVEHIST=10000
setopt append_history
setopt share_history
setopt hist_ignore_all_dups


# iTerm2 shell integration
if test -e "${HOME}/.iterm2_shell_integration.zsh";
then source "${HOME}/.iterm2_shell_integration.zsh"
fi

# Starship prompt
eval source <($BREW_PREFIX/bin/starship init zsh --print-full-init)

# Mise
eval "$($BREW_PREFIX/bin/mise activate zsh)"

# Auto compile .zshrc
if [ ~/.zshrc -nt ~/.zshrc.zwc ]; then
  zcompile ~/.zshrc
fi

# To propile performance, uncomment the line below.
# zprof
